// Copyright 2011 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// This is the input file to JavaCC for generating a scanner and 
// a parser for j--. From the specification in this file, JavaCC,  
// among other files, generates a JavaCCParser.java file 
// under $j/j--/src/jminusminus. This file is the parser. The code 
// between  PARSER_BEGIN( JavaCCParser ) and 
// PARSER_END( JavaCCParser ) is copied verbatim to this file. JavaCC 
// also generates a JavaCCParserTokenManager.java file which is the 
// scanner.

PARSER_BEGIN( JavaCCParser )

package jminusminus;

import java.util.ArrayList;

/**
 * Parser generated by JavaCC. It parses a j-- compilation unit 
 * (program file), taking tokens from the scanner (also generated by 
 * JavaCC), and produces an abstract syntax tree (AST) for it.
 */

class JavaCCParser {
    /** Whether a parser error has been found. */
    private boolean errorHasOccurred;
        
    /** Name of the file that is parsed. */     
    private String fileName;
        
    /**
     * Pull out the ambiguous part of a name and return it. 
     * 
     * @param name with an ambiguos part (possibly).
     * @return ambiguous part or null.
     */
    
    private AmbiguousName ambiguousPart( TypeName name ) {
        String qualifiedName = name.toString();
        int lastDotIndex = qualifiedName.lastIndexOf( '.' );
        return lastDotIndex == -1
            ? null // It was a simple name
            : new AmbiguousName( name.line(),
                qualifiedName.substring( 0, lastDotIndex ) );
    }

    /**
     * Report a syntax error.
     * 
     * @param message message identifying the error.
     * @param args related values.
     */

    private void reportParserError( String message, Object... args ) {
        errorHasOccurred = true;
        System.err.printf( "%s:%d: ", fileName, token.beginLine );
        System.err.printf( message, args );
        System.err.println();
    }
        
    /**
     * Recover from the parser error that occurred by skipping to 
     * any of the specified tokens. 
     *
     * Current error recovery mechanism is rather simple-minded and is 
     * based on skipping all the tokens until a SEMI or an EOF is 
     * encountered. This scheme can be enhanced by passing in the 
     * FOLLOW-SET of the non-terminal at hand.
     * 
     * @param skipTo array of tokens that we could skip to.
     * @param e exception that is raised by JavaCC in the event 
     * of a parser error.
     */
         
    private void recoverFromError( int[] skipTo, ParseException e ) {   
        // Get the possible expected tokens
        StringBuffer expected = new StringBuffer();
        for ( int i = 0; i < e.expectedTokenSequences.length; i++ ) {
            for ( int j = 0; j < e.expectedTokenSequences[ i ].length; 
                j++ ) {
                expected.append( "\n" );
                expected.append( "    " );
                expected.append( tokenImage[ 
                    e.expectedTokenSequences[ i ][ j ] ] );
                expected.append( "..." );
            }    
        }    

        // Print error message
        if ( e.expectedTokenSequences.length == 1 ) {
            reportParserError( "\"%s\" found where %s sought", 
                getToken( 1 ), expected );
        }
        else {
            reportParserError( "\"%s\" found where one of %s sought", 
                getToken( 1 ), expected );
        }

        // Recover
        boolean loop = true;              
        do {
            token = getNextToken(); 
            for ( int i = 0; i < skipTo.length; i++ ) {
                if ( token.kind == skipTo[ i ] ) {
                    loop = false;
                    break;
                }
            }
        } while( loop );
    }   

    /** 
     * Set the name of the file that is being parsed. 
     *
     * @param fileName name of the file.
     */
         
    public void fileName( String fileName ) {               
        this.fileName = fileName;
    }

    /**
     * Has a parser error occurred up to now?
     * 
     * @return true or false.
     */

    public boolean errorHasOccurred() {
        return errorHasOccurred;
    }   
}

PARSER_END( JavaCCParser )

/////////////////////////////////////////////////////////
//         The j-- lexical grammar starts here         //
/////////////////////////////////////////////////////////

// Whitespace -- ignored
SKIP: {" "|"\t"|"\n"|"\r"|"\f"}

// Single line comment -- ignored
SKIP: {<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>}

// Multi-line comment -- ignored
MORE: { "/*": MULTI_LINE_COMMENT }
<MULTI_LINE_COMMENT>
SPECIAL_TOKEN: { <MULTI_LINE_COMMENT_END: "*/"> : DEFAULT }
<MULTI_LINE_COMMENT>
MORE: { < ~[] > }

// Reserved words
TOKEN:
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < DEF: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

// Operators (these could be combined with the reserved words)
TOKEN:
{
  < ASSIGN: "=" >
| < EQUAL: "==" >
| < GT: ">" >
| < LS: "<" >
| < INC: "++" >
| < DEC: "--" >
| < LOR: "||" >
| < LAND: "&&" >
| < GE: ">=" >
| < LE: "<=" >
| < LNOT: "!" >
| < LNOT_ASSIGN: "!=" >
| < MINUS: "-" >
| < MINUS_ASSIGN: "-=" >
| < PLUS: "+" >
| < PLUS_ASSIGN: "+=" >
| < STAR: "*" >
| < STAR_ASSIGN: "*=" >
| < DIV: "/" >
| < DIV_ASSIGN: "/=" >
| < REM: "%" >
| < REM_ASSIGN: "%=" >
| < AND: "&" >
| < AND_ASSIGN: "&=" >
| < XOR: "^" >
| < XOR_ASSIGN: "^=" >
| < OR: "|" >
| < OR_ASSIGN: "|=" >
| < LSHIFT: "<<" >
| < LSHIFT_ASSIGN: "<<=" >
| < RSHIFT: ">>" >
| < RSHIFT_ASSIGN: ">>=" >
| < LRSHIFT: ">>>" >
| < LRSHIFT_ASSIGN: ">>>=" >
| < NOT: "~" >
| < TERN: "?" >
}

// Separators (these could be combined with the reserved words)
TOKEN:
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LCURLY: "{" >
| < RCURLY: "}" >
| < LBRACK: "[" >
| < RBRACK: "]" >
| < SEMI: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "." >
}

// Identifiers
TOKEN:
{
  < IDENTIFIER: (<LETTER>|"_"|"$") (<LETTER>|<DIGIT>|"_"|"$")* >
| < #LETTER: ["a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
| < #NON_ZERO_DIGIT: ["1"-"9"] >
}

// Literals
TOKEN:
{
  < INT_LITERAL: ("0" | <NON_ZERO_DIGIT> (<DIGIT>)*) >
| < DOUBLE_LITERAL: ("0" | <NON_ZERO_DIGIT> (<DIGIT>)*) "." (<DIGIT>)* (["d"] | ["D"])? >
| < CHAR_LITERAL: "'" (<ESC> | ~["'","\\","\n","\r"]) "'" >
| < STRING_LITERAL: "\"" (<ESC> | ~["\"","\\","\n","\r"])* "\"" >   
| < #ESC: "\\" ["n","t","b","r","f","\\","'","\""] >
}

// For anything else, we return an ERROR token. Without this 
// definition the TokenManager will throw an Error when a lexical 
// error occurs, making it impossible to recover from it. So we 
// define this ERROR token. 
TOKEN:
{
 < ERROR: ~[] >
}

/////////////////////////////////////////////////////////
//       The j-- syntactic grammar starts here         //
/////////////////////////////////////////////////////////

/**
 * Parse a compilation unit (a program file) and construct an AST 
 * for it. After constructing the Parser, this is its entry point.
 * 
 * <pre>
 *   compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
 *                       {IMPORT  qualifiedIdentifier SEMI}
 *                       {typeDeclaration}
 *                       EOF 
 * </pre>
 * 
 * @return an AST for a compilationUnit.
 */

public JCompilationUnit compilationUnit(): {
    int line = 0;
    TypeName packageName = null; // Default
    TypeName anImport = null;
    ArrayList<TypeName> imports = 
        new ArrayList<TypeName>();
    JAST aTypeDeclaration = null;
    ArrayList<JAST> typeDeclarations = new ArrayList<JAST>();
}
{
    try {
        [ 
            <PACKAGE> { line = token.beginLine; }
            packageName = qualifiedIdentifier() 
            <SEMI> 
        ]
        (
            <IMPORT> { line = line == 0 ? token.beginLine : line; }
            anImport = qualifiedIdentifier() 
            { imports.add( anImport ); } 
            <SEMI>
        )*
        (
            aTypeDeclaration = typeDeclaration()
            {
                line = line == 0 ? aTypeDeclaration.line() : line;
                typeDeclarations.add( aTypeDeclaration );
            }
        )*
        <EOF> { line = line == 0 ? token.beginLine : line; }
    } 
    catch ( ParseException e ) {
        recoverFromError( new int[] { SEMI, EOF }, e );
    }
    { 
        return new JCompilationUnit( fileName, line, 
            packageName, imports, typeDeclarations ); 
    }
}

/**
 * Parse a qualified identifier.
 * 
 * <pre>
 *   qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}
 * </pre>
 * 
 * @return an instance of TypeName.
 */

private TypeName qualifiedIdentifier(): {
    int line = 0;
    String qualifiedIdentifier = "";
}
{
    try {
        <IDENTIFIER> 
        { 
            line = token.beginLine; 
            qualifiedIdentifier = token.image; 
        }
        ( 
            <DOT> <IDENTIFIER> 
            { qualifiedIdentifier += "." + token.image; } 
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return 
         new TypeName( line, qualifiedIdentifier ); }
}

/**
 * Parse a type declaration.
 * 
 * <pre>
 *   typeDeclaration ::= modifiers classDeclaration
 * </pre>
 * 
 * @return an AST for a typeDeclaration.
 */

private JAST typeDeclaration(): {
    ArrayList<String> mods = null;
    JAST declaration = null;
}
{
    try {
        LOOKAHEAD ( modifiers() <CLASS> ) 
        (
			mods = modifiers()
			declaration = classDeclaration( mods )
        ) | LOOKAHEAD( modifiers() <INTERFACE> )
        (
			mods = modifiers()
			declaration = interfaceDeclaration( mods )
        )
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return declaration; }
}

/**
 * Parse modifiers.
 * 
 * <pre>
 *   modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}
 * </pre>
 * 
 * Check for duplicates, and conflicts among access modifiers (public,
 * protected, and private). Otherwise, no checks.
 * 
 * @return a list of modifiers.
 */

private ArrayList<String> modifiers(): {
    ArrayList<String> mods = new ArrayList<String>();
    boolean scannedPUBLIC = false;
    boolean scannedPROTECTED = false;
    boolean scannedPRIVATE = false;
    boolean scannedSTATIC = false;
    boolean scannedABSTRACT = false;
}
{
    try {
    (   
        <PUBLIC> 
        { 
            mods.add( "public" );
            if ( scannedPUBLIC ) {
                reportParserError( "Repeated modifier: public" );
            }
            if ( scannedPROTECTED || scannedPRIVATE ) {
                reportParserError( "Access conflict in modifiers" );
            }
            scannedPUBLIC = true;
        } |
        <PROTECTED> 
        { 
            mods.add( "protected" );
            if ( scannedPROTECTED ) {
                reportParserError( "Repeated modifier: protected" );
            }
            if ( scannedPUBLIC || scannedPRIVATE ) {
                reportParserError( "Access conflict in modifiers" );
            }
            scannedPROTECTED = true;
        } |
        <PRIVATE> 
        { 
            mods.add( "private" );
            if ( scannedPRIVATE ) {
                reportParserError( "Repeated modifier: private" );
            }
            if ( scannedPUBLIC || scannedPROTECTED ) {
                reportParserError( "Access conflict in modifiers" );
            }
            scannedPRIVATE = true;
        } |
        <STATIC> 
        { 
            mods.add( "static" );
            if ( scannedSTATIC ) {
                reportParserError( "Repeated modifier: static" );
            }
            scannedSTATIC = true;
        } |
        <ABSTRACT> 
        { 
            mods.add( "abstract" );
            if ( scannedABSTRACT ) {
                reportParserError( "Repeated modifier: abstract" );
            }
            scannedABSTRACT = true;
        } 
    )*                  
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return mods; }
}

/**
 * Parse a class declaration.
 * 
 * <pre>
 *   classDeclaration ::= CLASS IDENTIFIER 
 *                        [EXTENDS qualifiedIdentifier] 
 *                        [IMPLEMENTS qualifiedIdentifier {COMMA qualifiedIdentifier}] 
 *                        classBody
 * </pre>
 * 
 * A class which doesn't explicitly extend another (super) class 
 * implicitly extends the superclass java.lang.Object.
 * 
 * @param mods the class modifiers.
 * @return an AST for a classDeclaration.
 */
     
private JClassDeclaration classDeclaration( ArrayList<String> mods ): {
    int line = 0;
    String name = "";
    Type superClass = Type.OBJECT;
    ArrayList<JMember> classBody = null;
	ArrayList<Type> implementsTypes = new ArrayList<Type>();
}
{
    try {
        <CLASS> { line = token.beginLine; }
        <IDENTIFIER> { name = token.image; }
        [ 
            <EXTENDS> superClass = qualifiedIdentifier() 
        ]
        [ 
            <IMPLEMENTS>
            { implementsTypes.add(qualifiedIdentifier()); }
            (
				<COMMA>
				{ implementsTypes.add(qualifiedIdentifier()); }
            )*
        ]
        classBody = classBody()           
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { 
        return new JClassDeclaration( line, mods, 
            name, superClass, implementsTypes, classBody ); 
    }
}

/**
 * Parse an interface declaration.
 * 
 * <pre>
 *    interfaceDeclaration ::= INTERFACE IDENTIFIER 
 *                           [EXTENDS qualifiedIdentifier] 
 *                           interfaceBody
 * </pre>
 * 
 * An interface which doesn't explicitly extend another (super) interface 
 * implicitly extends the superclass java.lang.Object.
 * 
 * @param mods the interface modifiers.
 * @return an AST for a interfaceDeclaration.
 */
     
private JInterfaceDeclaration interfaceDeclaration( ArrayList<String> mods ): {
    int line = 0;
    String name = "";
    ArrayList<Type> superClass = new ArrayList<Type>();
    ArrayList<JMember> interfaceBody = null;
}
{
    try {
        <INTERFACE> { line = token.beginLine; }
        <IDENTIFIER> { name = token.image; }
        [ 
            <EXTENDS> { superClass.add(qualifiedIdentifier()); }
            (
				<COMMA>
				{ superClass.add(qualifiedIdentifier()); }
            )*
        ]
        interfaceBody = interfaceBody()           
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { 
        return new JInterfaceDeclaration( line, mods, name, superClass, interfaceBody ); 
    }
}

/**
 * Parse a class body.
 * 
 * <pre>
 *   classBody ::= LCURLY
 *                   {modifiers classMemberDecl}
 *                 RCURLY
 * </pre>
 * 
 * @return list of members in the class body.
 */

private ArrayList<JMember> classBody(): {
    ArrayList<String> mods = null;
    JMember aMember = null;
    ArrayList<JMember> members = new ArrayList<JMember>();
}
{
    try {
        <LCURLY>
        ( 
            mods = modifiers()
            aMember = classMemberDecl( mods ) { members.add( aMember ); } 
        )*
        <RCURLY>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return members; }
}

/**
 * Parse an interface body.
 * 
 * <pre>
 *   interfaceBody ::= LCURLY
 *                   {modifiers interfaceMemberDecl}
 *                 RCURLY
 * </pre>
 * 
 * @return list of members in the class body.
 */

private ArrayList<JMember> interfaceBody(): {
    ArrayList<String> mods = null;
    JMember aMember = null;
    ArrayList<JMember> members = new ArrayList<JMember>();
}
{
    try {
        <LCURLY>
        ( 
            mods = modifiers()
            aMember = interfaceMemberDecl( mods ) { members.add( aMember ); } 
        )*
        <RCURLY>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return members; }
}

/**
 * Parse a class member declaration.
 * 
 * <pre>
 *   classMemberDecl ::= IDENTIFIER            // constructor
 *                    formalParameters throwTypes
 *                    block
 *                | (VOID | type) IDENTIFIER  // method
 *                    formalParameters throwTypes
 *                    (block | SEMI)
 *                | type variableDeclarators SEMI 
 *  	          | block // initializing field
 * </pre>
 * 
 * @param mods the class member modifiers.
 * @return an AST for a memberDecl.
 */
    
private JMember classMemberDecl( ArrayList<String>  mods ): {
    int line = 0;
    Type type = null;
    String name = "";
    ArrayList<JFormalParameter> params = null;
    ArrayList<Type> throwTypes = null;
    JBlock body = null;
    ArrayList<JVariableDeclarator> variableDeclarators = null;
    JMember memberDecl = null;
}
{
    try {
        LOOKAHEAD( <LCURLY> )
        (
            body = block()
            { 
                memberDecl = 
                new JInitializationBlockDeclaration( line, mods, body );
            }
        ) | LOOKAHEAD( <IDENTIFIER> <LPAREN> )
        (
            <IDENTIFIER> 
            { 
                line = token.beginLine; 
                name = token.image; 
            } 
            params = formalParameters()
            throwTypes = throwTypes()
            body = block()
            { 
                memberDecl = 
                new JConstructorDeclaration( line, mods, 
                                             name, throwTypes, params, body );
            }
        ) |     
        LOOKAHEAD( ( <VOID> | type() ) <IDENTIFIER> <LPAREN> )
        (
            ( 
                <VOID> { type = Type.VOID; } | 
                type = type() 
            ) 
            { line = token.beginLine; }
            <IDENTIFIER> { name = token.image; } 
            params = formalParameters()
            throwTypes = throwTypes()
            ( 
                body = block() | 
                <SEMI> 
            )
            { 
                memberDecl = 
                   new JMethodDeclaration( line, mods, name, 
                                           type, throwTypes, params, body ); 
            } 
        ) | 
        ( 
            type = type() { line = token.beginLine; }
            variableDeclarators = variableDeclarators( type )
            <SEMI>
            { 
                memberDecl = new JFieldDeclaration( line, mods, 
                    variableDeclarators ); 
            }
        )
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return memberDecl; }
}

/**
 * Parse an interface member declaration.
 * 
 * <pre>
 *    interfaceMemberDecl ::= (VOID | type) IDENTIFIER  // method
 *    						    formalParameters throwTypes
 *    						    SEMI
 *                    		  | type variableDeclarators SEMI // field
 * </pre>
 * 
 * @param mods the class member modifiers.
 * @return an AST for a memberDecl.
 */
    
private JMember interfaceMemberDecl( ArrayList<String>  mods ): {
    int line = 0;
    Type type = null;
    String name = "";
    ArrayList<JFormalParameter> params = null;
    ArrayList<Type> throwTypes = null;
    JBlock body = null;
    ArrayList<JVariableDeclarator> variableDeclarators = null;
    JMember memberDecl = null;
}
{
    try {
        LOOKAHEAD( ( <VOID> | type() ) <IDENTIFIER> <LPAREN> )
        (
            ( 
                <VOID> { type = Type.VOID; } | 
                type = type() 
            ) 
            { line = token.beginLine; }
            <IDENTIFIER> { name = token.image; } 
            params = formalParameters() 
            throwTypes = throwTypes()
			<SEMI> 
            { 
                memberDecl = 
                   new JMethodDeclaration( line, mods, name, 
                                           type, throwTypes, params, body ); 
            } 
        ) | 
        ( 
            type = type() { line = token.beginLine; }
            variableDeclarators = variableDeclarators( type )
            <SEMI>
            { 
                memberDecl = new JFieldDeclaration( line, mods, 
                    variableDeclarators ); 
            }
        )
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return memberDecl; }
}

/**
 * Parse a block.
 * 
 * <pre>
 *   block ::= LCURLY {blockStatement} RCURLY 
 * </pre>
 * 
 * @return an AST for a block.
 */

private JBlock block(): {
    int line = 0;
    JStatement aStatement = null;
    ArrayList<JStatement> statements = new ArrayList<JStatement>();
}
{
    try {
        <LCURLY> { line = token.beginLine; } 
        (
            aStatement = blockStatement()
            { statements.add( aStatement ); }
        )*
        <RCURLY>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }   
    { return new JBlock( line, statements ); }
}

/**
 * Parse a block statement.
 * 
 * <pre>
 *   blockStatement ::= localVariableDeclarationStatement
 *                    | statement
 * </pre>
 * 
 * @return an AST for a blockStatement.
 */

private JStatement blockStatement(): {
    JStatement statement = null;
}
{       
    try {
        LOOKAHEAD( type() <IDENTIFIER> )
        statement = localVariableDeclarationStatement() |
        statement =  statement() 
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }   
    { return statement; }
}

/**
 * Parse a statement.
 * 
 * <pre>
 *   statement ::= block
 *               | IF parExpression statement [ELSE statement]
 *               | WHILE parExpression statement 
 *           	 | FOR forExpression statement
 *               | RETURN [expression] SEMI
 *               | SEMI 
 *               | statementExpression SEMI
 * </pre>
 * 
 * @return an AST for a statement.
 */

private JStatement statement(): {
    int line = 0;
    JStatement statement = null;
    JExpression test = null;
    JStatement consequent = null;
    JStatement alternate = null;
    JStatement body = null;
    JExpression expr = null;
    Type type = null;
	JExpression initializer = null;
	JVariableDeclaration varDecl = null;
	JFormalParameter variable = null;
	JExpression exp2 = null;
	JExpression exp3 = null;
	JStatement catchBlock = null;
	ArrayList<JStatement> catchBlocks = null;
	JFormalParameter exceptionToCatch = null;
    ArrayList<JFormalParameter> exceptionsToCatch = null;
}
{       
    try {
        statement = block() |
        <IF> { line = token.beginLine; }
        test = parExpression() 
        consequent = statement() 

        // Even without the lookahead below, which is added to 
        // suppress JavaCC warnings, dangling if-else problem is 
        // resolved by binding the alternate to the closest 
        // consequent.
        [ 
            LOOKAHEAD( <ELSE> ) 
            <ELSE> alternate = statement() 
        ]
        { statement = 
            new JIfStatement( line, test, consequent, alternate ); } |
        <WHILE> { line = token.beginLine; }
        test = parExpression() 
        body = statement()
        { statement = new JWhileStatement( line, test, body ); } |
        <FOR> { line = token.beginLine; }
        // forExpression ::= LPAREN [[type] variableDeclarator] SEMI [expression] SEMI [expression] RPAREN
		//				| LPAREN formalParameter COLON expression RPAREN
		<LPAREN>
		(
			LOOKAHEAD( formalParameter() <COLON> )
			(
				variable = formalParameter()
				<COLON>
				exp2 = expression()
			) |
			(
				( 
					LOOKAHEAD( localVariableDeclarationStatement() )
					varDecl = localVariableDeclarationStatement() |
					initializer = expression()
					< SEMI >
				)
				[
					LOOKAHEAD( expression() )
					exp2 = expression()
				]
				<SEMI>
				[
					LOOKAHEAD( expression() )
					exp3 = expression()
				]
			)
		)
		<RPAREN>
        body = statement()
        { 
        	if (variable != null) {
				statement = new JForEachStatement(line, variable, exp2, body);
			} else if (varDecl != null) {
				statement = new JForStatement(line, varDecl, exp2, exp3, body);
			} else {
				statement = new JForStatement(line, initializer, exp2, exp3, body);
			}
        } |
        <TRY>
        body = statement()
        { 
        	catchBlocks = new ArrayList<JStatement>();
        	exceptionsToCatch = new ArrayList<JFormalParameter>();
        }
        (
        	<CATCH> <LPAREN> exceptionToCatch = formalParameter() <RPAREN>
        	catchBlock = statement()
        	{ 
        		exceptionsToCatch.add(exceptionToCatch);
        		catchBlocks.add(catchBlock);
        	}
        )*
        [
        	<FINALLY>
        	alternate = statement()
        ]
        { statement = new JTryCatchFinallyStatement(line, body, catchBlocks, exceptionsToCatch, alternate); } |
        <THROW>
        expr = expression()
        <SEMI>
        { statement = new JThrowStatement(line, expr); } |
        <RETURN> { line = token.beginLine; }
        [ 
            expr = expression() 
        ] 
        <SEMI>
        { statement = new JReturnStatement( line, expr ); } |
        <SEMI> 
        { statement = new JEmptyStatement( line ); } |
        // Must be a statementExpression
        statement = statementExpression() 
        <SEMI>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return statement; }
}

/**
 * Parse formal parameters.
 * 
 * <pre>
 *   formalParameters ::= LPAREN 
 *                          [formalParameter 
 *                            {COMMA  formalParameter}]
 *                        RPAREN
 * </pre>
 * 
 * @return a list of formal parameters.
 */

private ArrayList<JFormalParameter> formalParameters(): {
    ArrayList<JFormalParameter> parameters = 
        new ArrayList<JFormalParameter>();
    JFormalParameter aParameter = null;
}
{
    try {
        <LPAREN>
        [ 
            aParameter = formalParameter()
            { parameters.add( aParameter ); }
            ( 
                <COMMA> aParameter = formalParameter()
                { parameters.add( aParameter ); }
            )* 
        ]
        <RPAREN>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return parameters; }
}

/**
 * Parse a formal parameter.
 * 
 * <pre>
 *   formalParameter ::= type IDENTIFIER
 * </pre>
 * 
 * @return an AST for a formalParameter.
 */

private JFormalParameter formalParameter(): {
    int line = 0;
    Type type = null;
    String name = "";
}
{
    try {
        type = type() { line = token.beginLine; }
        <IDENTIFIER> { name = token.image; }
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return new JFormalParameter( line, name, type ); }
}

/**
 * Parse a (list of) thrown exception types
 * 
 * <pre>
 *   throwTypes ::= [THROWS qualifiedIdentifier {COMMA qualifiedIdentifier}]
 * </pre>
 * 
 * @return a list of AST for throwTypes
 */
private ArrayList<Type> throwTypes(): {
	ArrayList<Type> throwTypes = new ArrayList<Type>();
	Type throwType = null;
} {
    try {
        [ 
    		<THROWS>
            throwType = qualifiedIdentifier()
            { throwTypes.add( throwType ); }
            ( 
                <COMMA> throwType = qualifiedIdentifier()
                { throwTypes.add( throwType ); }
            )* 
        ]
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return throwTypes; }
}

/**
 * Parse a parenthesized expression.
 * 
 * <pre>
 *   parExpression ::= LPAREN expression RPAREN
 * </pre>
 * 
 * @return an AST for a parExpression.
 */

private JExpression parExpression(): {
    JExpression expr = null;

}
{
    try {
        <LPAREN> expr = expression() <RPAREN>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }   
    { return expr; }
}

/**
 * Parse a local variable declaration statement.
 * 
 * <pre>
 *   localVariableDeclarationStatement ::= type 
 *                                           variableDeclarators 
 *                                             SEMI
 * </pre>
 * 
 * @return an AST for a variableDeclaration.
 */

private JVariableDeclaration localVariableDeclarationStatement(): {
    int line = 0;
    Type type = null;
    ArrayList<JVariableDeclarator> vdecls = null;
    ArrayList<String> mods = new ArrayList<String>();
}
{
    try {
        type = type() { line = token.beginLine; }
        vdecls = variableDeclarators( type ) <SEMI>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }   
    { return new JVariableDeclaration( line, mods, vdecls ); }
}

/**
 * Parse variable declarators.
 * 
 * <pre>
 *   variableDeclarators ::= variableDeclarator 
 *                             {COMMA variableDeclarator}
 * </pre>
 * 
 * @param type type of the variables.
 * @return a list of variable declarators.
 */

private ArrayList<JVariableDeclarator> 
    variableDeclarators( Type type ): {
    JVariableDeclarator aVariableDeclarator = null;
    ArrayList<JVariableDeclarator> variableDeclarators =
        new ArrayList<JVariableDeclarator>();
}
{
    try {
        aVariableDeclarator = variableDeclarator( type )
        { variableDeclarators.add( aVariableDeclarator ); }
        (
            <COMMA> aVariableDeclarator = variableDeclarator( type )
            { variableDeclarators.add( aVariableDeclarator ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return variableDeclarators; }
}

/**
 * Parse a variable declarator.
 * 
 * <pre>
 *   variableDeclarator ::= IDENTIFIER
 *                          [ASSIGN variableInitializer]
 * </pre>
 * 
 * @param type type of the variable.
 * @return an AST for a variableDeclarator.
 */

private JVariableDeclarator variableDeclarator( Type type ): {
    int line = 0;
    JExpression initial = null;
    String name = "";
}
{
    try {
        <IDENTIFIER> { line = token.beginLine; name = token.image; }
        [ 
            <ASSIGN> initial = variableInitializer( type ) 
        ]
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }   
    { return new JVariableDeclarator( line, name, type, initial ); }
}

/**
 * Parse a variable initializer.
 * 
 * <pre>
 *   variableInitializer ::= arrayInitializer
 *                         | expression
 * </pre>
 * 
 * @param type type of the variable.
 * @return an AST for a variableInitializer.
 */

private JExpression variableInitializer( Type expected ): {
    JExpression initializer = null;
}
{
    try {
        initializer = arrayInitializer( expected ) |
        initializer = expression()
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }   
    { return initializer; }
}

/**
 * Parse an array initializer.
 * 
 * <pre>
 *   arrayInitializer ::= LCURLY 
 *                          [variableInitializer 
 *                            {COMMA variableInitializer} [COMMA]]
 *                        RCURLY 
 * </pre>
 * 
 * @param type type of the array.
 * @return an AST for an arrayInitializer.
 */

private JArrayInitializer arrayInitializer( Type expected ): {
    int line = 0; 
    ArrayList<JExpression> initials = new ArrayList<JExpression>();
    JExpression anInitializer = null;
}
{
    try {
        <LCURLY> { line = token.beginLine; }
        [ 
            anInitializer = 
              variableInitializer( expected.componentType() ) 
            { initials.add( anInitializer ); }
            ( 
                <COMMA> anInitializer = 
                    variableInitializer( expected.componentType() ) 
                { initials.add( anInitializer ); } 
            )* 
        ] 
        <RCURLY>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return new JArrayInitializer( line, expected, initials ); }
}

/**
 * Parse arguments.
 * 
 * <pre>
 *   arguments ::= LPAREN [expression {COMMA expression}] RPAREN    
 * </pre>
 * 
 * @return a list of expressions.
 */

private ArrayList<JExpression> arguments(): {
    ArrayList<JExpression> args = new ArrayList<JExpression>();
    JExpression anExpression = null;
}
{
    try {
        <LPAREN>
        [ 
            anExpression = expression() { args.add( anExpression ); } 
            ( 
                <COMMA> anExpression = expression() 
                { args.add( anExpression ); } 
            )*
        ] 
        <RPAREN>
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return args; }
}

/**
 * Parse a type.
 * 
 * <pre>
 *   type ::= referenceType 
 *          | basicType
 * </pre>
 * 
 * @return an instance of Type.
 */
     
private Type type(): {
    Type type = null;
}
{
    try {
        LOOKAHEAD( <IDENTIFIER> | basicType() <LBRACK> <RBRACK> )
        type = referenceType() |
        type = basicType()
    } 
    catch ( ParseException e ) { 
       recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return type; }
}

/**
 * Parse a basic type.
 * 
 * <pre>
	basicType ::= BOOLEAN | CHAR | INT | DOUBLE
 * </pre>
 * 
 * @return an instance of Type.
 */

private Type basicType(): {
    Type type = Type.ANY;
}
{
    try {
        <BOOLEAN> { type = Type.BOOLEAN; } |
        <CHAR> { type = Type.CHAR; } |
        <INT> { type = Type.INT; } |
        <DOUBLE> { type = Type.DOUBLE; }
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return type; }
}

/**
 * Parse a reference type.
 * 
 * <pre>
 *   referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
 *                   | qualifiedIdentifier {LBRACK RBRACK}
 * </pre>
 * 
 * @return an instance of Type.
 */

private Type referenceType(): {
    Type type = Type.ANY;
}
{
    try {
        type = basicType()
        <LBRACK> <RBRACK> { type = new ArrayTypeName( type ); }
        ( 
            <LBRACK> <RBRACK> 
            { type = new ArrayTypeName( type ); } 
        )* |
        type = qualifiedIdentifier()
        ( 
            <LBRACK> <RBRACK> 
            { type = new ArrayTypeName( type ); } 
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return type; }       
}

/**
 * Parse a statement expression. 
 * 
 * <pre>
 *   statementExpression ::= expression // but must have 
 *                                      // side-effect, eg i++
 * </pre>
 * 
 * @return an AST for a statementExpression.
 */

private JStatement statementExpression(): {
    int line = 0;
    JExpression expr = null;
}
{
    try {
        expr = expression()
        {
            line = expr.line();
            if ( expr instanceof JAssignment
              || expr instanceof JPreIncrementOp
              || expr instanceof JPostDecrementOp
              || expr instanceof JMessageExpression
              || expr instanceof JSuperConstruction
              || expr instanceof JThisConstruction 
              || expr instanceof JNewOp
              || expr instanceof JNewArrayOp ) {
                // So as not to save on stack
                expr.isStatementExpression = true;
            }
            else {
                reportParserError( "Invalid statement expression; " + 
                    "it does not have a side-effect" );
            }
        }
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return new JStatementExpression( line, expr ); }
}

/**
 * An expression.
 * 
 * <pre>
 *   expression ::= assignmentExpression | assignmentExpression TERN assignmentExpression COLON assignmentExpression
 * </pre>
 * 
 * @return an AST for an expression.
 */

private JExpression expression(): {
	int line = 0;
    JExpression expr = null, branchTrue = null, branchFalse = null;
}
{
    try {
        expr = assignmentExpression()
        [
        	<TERN>
        	branchTrue = assignmentExpression()
        	<COLON>
        	branchFalse = assignmentExpression()
        	{
        		line = expr.line();
        	  	expr = new JConditionalExpression(line, expr, branchTrue, branchFalse); 
        	}
        ]
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return expr; }
}

/**
 * Parse an assignment expression.
 * 
 * <pre>
 *   assignmentExpression ::= 
 *       conditionalExpression // level 13
 *           [( ASSIGN  // conditionalExpression
 *            | PLUS_ASSIGN // must be valid lhs
 *            | MINUS_ASSIGN // must be valid lhs
 *            | STAR_ASSIGN // must be valid lhs
 *            | DIV_ASSIGN // must be valid lhs
 *            | REM_ASSIGN // must be valid lhs
 *            )
 *            assignmentExpression]
 * </pre>
 * 
 * @return an AST for an assignmentExpression.
 */

private JExpression assignmentExpression(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = conditionalExpression() { line = lhs.line(); }
        [       
            <ASSIGN> 
            rhs = assignmentExpression()
            { lhs = new JAssignOp( line, lhs, rhs ); } |
            <PLUS_ASSIGN>
            rhs = assignmentExpression()
            { lhs = new JPlusAssignOp( line, lhs, rhs ); } |
            <MINUS_ASSIGN>
            rhs = assignmentExpression()
            { lhs = new JMinusAssignOp( line, lhs, rhs ); } |
            <STAR_ASSIGN>
            rhs = assignmentExpression()
            { lhs = new JStarAssignOp( line, lhs, rhs ); } |
            <DIV_ASSIGN>
            rhs = assignmentExpression()
            { lhs = new JDivAssignOp( line, lhs, rhs ); } |
            <REM_ASSIGN>
            rhs = assignmentExpression()
            { lhs = new JRemAssignOp( line, lhs, rhs ); }
        ]
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse a conditional-and expression.
 * 
 * <pre>
 *   conditionalExpression ::= equalityExpression // level 10
 *                                  {LAND equalityExpression}
 * </pre>
 * 
 * @return an AST for a conditionalExpression.
 */

private JExpression conditionalExpression(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = bitwiseExpressionFour() { line = lhs.line(); }
        ( 
            <LAND>
            rhs = bitwiseExpressionFour()
            { lhs = new JLogicalAndOp( line, lhs, rhs ); } |
            <LOR>
            rhs = bitwiseExpressionFour()
            { lhs = new JLogicalOrOp( line, lhs, rhs ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse an bitwise expression (4).
 * 
 * <pre>
	bitwiseExpressionFour ::= bitwiseExpressionThree		// level 9
							{OR bitwiseExpressionThree}
 * </pre>
 * 
 * @return an AST for an bitwiseExpressionFour.
 */

private JExpression bitwiseExpressionFour(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = bitwiseExpressionThree() { line = lhs.line(); }
        ( 
            <OR> 
            rhs = bitwiseExpressionThree()
            { lhs = new JOrOp( line, lhs, rhs ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse an bitwise expression (3).
 * 
 * <pre>
	bitwiseExpressionThree ::= bitwiseExpressionTwo		// level 8
							{XOR bitwiseExpressionTwo}
 * </pre>
 * 
 * @return an AST for an bitwiseExpressionThree.
 */

private JExpression bitwiseExpressionThree(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = bitwiseExpressionTwo() { line = lhs.line(); }
        ( 
            <XOR> 
            rhs = bitwiseExpressionTwo()
            { lhs = new JXorOp( line, lhs, rhs ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse an bitwise expression (2).
 * 
 * <pre>
	bitwiseExpressionTwo ::= equalityExpression		// level 7
							{AND equalityExpression}
 * </pre>
 * 
 * @return an AST for an bitwiseExpressionTwo.
 */

private JExpression bitwiseExpressionTwo(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = equalityExpression() { line = lhs.line(); }
        ( 
            <AND> 
            rhs = equalityExpression()
            { lhs = new JAndOp( line, lhs, rhs ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse an equality expression.
 * 
 * <pre>
 *   equalityExpression ::= relationalExpression  // level 6
 *                            {EQUAL relationalExpression}
 * </pre>
 * 
 * @return an AST for an equalityExpression.
 */

private JExpression equalityExpression(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = relationalExpression() { line = lhs.line(); }
        ( 
            <EQUAL> 
            rhs = relationalExpression()
            { lhs = new JEqualOp( line, lhs, rhs ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse a relational expression.
 * 
 * <pre>
 *   relationalExpression ::= additiveExpression  // level 5
 *                              [(GT | LE) additiveExpression 
 *                              | INSTANCEOF referenceType]
 * </pre>
 * 
 * @return an AST for a relationalExpression.
 */

private JExpression relationalExpression(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
    Type type = null;
}
{
    try {
        lhs = bitwiseExpressionOne() { line = lhs.line(); }
        [ 
            <GT> 
            rhs = bitwiseExpressionOne()
            { lhs = new JGreaterThanOp( line, lhs, rhs ); } |
            <LE> 
            rhs = bitwiseExpressionOne()
            { lhs = new JLessEqualOp( line, lhs, rhs ); } |
            <INSTANCEOF> 
            type = referenceType()
            { lhs = new JInstanceOfOp( line, lhs, type ); }
        ]
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse an bitwise expression (1).
 * 
 * <pre>
	bitwiseExpressionOne ::= additiveExpression		// level 4
							{(LSHIFT | RSHIFT | LRSHIFT) additiveExpression}
 * </pre>
 * 
 * @return an AST for an bitwiseExpressionOne.
 */

private JExpression bitwiseExpressionOne(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = additiveExpression() { line = lhs.line(); }
        ( 
            <LSHIFT> 
            rhs = additiveExpression()
            { lhs = new JLShiftOp( line, lhs, rhs ); } |
            <RSHIFT> 
            rhs = additiveExpression()
            { lhs = new JRShiftOp( line, lhs, rhs ); } |
            <LRSHIFT> 
            rhs = additiveExpression()
            { lhs = new JLRShiftOp( line, lhs, rhs ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse an additive expression.
 * 
 * <pre>
 *   additiveExpression ::= multiplicativeExpression // level 3
 *                            {MINUS multiplicativeExpression}
 * </pre>
 * 
 * @return an AST for an additiveExpression.
 */

private JExpression additiveExpression(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = multiplicativeExpression() { line = lhs.line(); } 
        ( 
            <PLUS> 
            rhs = multiplicativeExpression()
            { lhs = new JPlusOp( line, lhs, rhs ); } |
            <MINUS> 
            rhs = multiplicativeExpression()
            { lhs = new JSubtractOp( line, lhs, rhs ); }
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse a multiplicative expression.
 * 
 * <pre>
 *   multiplicativeExpression ::= unaryExpression  // level 2
									{(STAR | DIV | REM) unaryExpression }
 * </pre>
 * 
 * @return an AST for a multiplicativeExpression.
 */

private JExpression multiplicativeExpression(): {
    int line = 0;
    JExpression lhs = null, rhs = null;
}
{
    try {
        lhs = unaryExpression() { line = lhs.line(); }
        ( 
            <STAR> 
            rhs = unaryExpression()
            { lhs = new JMultiplyOp( line, lhs, rhs ); } | 
            <DIV> 
            rhs = unaryExpression()
            { lhs = new JDivideOp( line, lhs, rhs ); } | 
            <REM> 
            rhs = unaryExpression()
            { lhs = new JRemOp( line, lhs, rhs ); } 
        )*
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return lhs; }
}

/**
 * Parse an unary expression.
 * 
 * <pre>
 *   unaryExpression ::= INC unaryExpression // level 1
 *                     | DEC unaryExpression
 *                     | MINUS unaryExpression
 *                     | simpleUnaryExpression
 * </pre>
 * 
 * @return an AST for an unaryExpression.
 */

private JExpression unaryExpression(): {
    int line = 0;
    JExpression expr = null, unaryExpr = null;
}
{
    try {
        <INC> { line = token.beginLine; }
        unaryExpr = unaryExpression()
        { expr = new JPreIncrementOp( line, unaryExpr ); } | 
        <DEC> { line = token.beginLine; }
        unaryExpr = unaryExpression()
        { expr = new JPreDecrementOp( line, unaryExpr ); } | 
        <MINUS> { line = token.beginLine; }
        unaryExpr = unaryExpression()
        { expr = new JNegateOp( line, unaryExpr ); } |
        expr = simpleUnaryExpression()
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return expr; }
}

/**
 * Parse a simple unary expression.
 * 
 * <pre>
 *   simpleUnaryExpression ::= LNOT unaryExpression
							 | PLUS unaryExpression
							 | NOT unaryExpression
 *                           | LPAREN basicType RPAREN 
 *                               unaryExpression
 *                           | LPAREN         
 *                               referenceType
 *                             RPAREN simpleUnaryExpression
 *                           | postfixExpression
 * </pre>
 * 
 * @return an AST for a simpleUnaryExpression.
 */

private JExpression simpleUnaryExpression(): {
    int line = 0;
    Type type = null;
    JExpression expr = null, unaryExpr = null, simpleUnaryExpr = null;
}
{
    try {
        <LNOT> { line = token.beginLine; }
        unaryExpr = unaryExpression()
        { expr = new JLogicalNotOp( line, unaryExpr ); } |
        <PLUS> { line = token.beginLine; }
        unaryExpr = unaryExpression()
        { expr = new JUnaryPlusOp( line, unaryExpr ); } |
        <NOT> { line = token.beginLine; }
        unaryExpr = unaryExpression()
        { expr = new JNotOp( line, unaryExpr ); } |
        LOOKAHEAD( <LPAREN> basicType() <RPAREN> )
        <LPAREN> { line = token.beginLine; }
        type = basicType() 
        <RPAREN>
        unaryExpr = unaryExpression()
        { expr = new JCastOp( line, type, unaryExpr ); } |
        LOOKAHEAD( <LPAREN> referenceType() <RPAREN> )
        <LPAREN> { line = token.beginLine; }
        type = referenceType() 
        <RPAREN>
        simpleUnaryExpr = simpleUnaryExpression()
        { expr = new JCastOp( line, type, simpleUnaryExpr ); } | 
        expr = postfixExpression() 
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return expr ; }
}

/**
 * Parse a postfix expression.
 * 
 * <pre>
 *   postfixExpression ::= primary {selector} {DEC|INC}
 * </pre>
 * 
 * @return an AST for a postfixExpression.
 */

private JExpression postfixExpression(): {
    int line = 0; 
    JExpression primaryExpr = null;
}
{
    try {
        primaryExpr = primary() { line = primaryExpr.line(); } 
        (
            primaryExpr = selector( primaryExpr ) 
        )*
        ( 
            <DEC> 
            { primaryExpr = 
                new JPostDecrementOp( line, primaryExpr ); } |
            <INC>
            { primaryExpr = 
                new JPostIncrementOp( line, primaryExpr ); }
        )*
    } 
    catch ( ParseException e ) {
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return primaryExpr; }
}

/**
 * Parse a selector.
 * 
 * <pre>
 *   selector ::= DOT qualifiedIdentifier [arguments]
 *              | LBRACK expression RBRACK
 * </pre>
 * 
 * @param target the target expression for this selector.
 * @return an AST for a selector.
 */

private JExpression selector( JExpression target ): {       
    int line = 0;
    ArrayList<JExpression> args = null;
    TypeName id = null;
    JExpression expr = null;
}
{
    try {
        <DOT> { line = token.beginLine; } 
        id = qualifiedIdentifier()
        { expr = 
              new JFieldSelection( line, ambiguousPart( id ),
                                   target, id.simpleName() ); }
        [ 
            args = arguments() 
            { expr = new JMessageExpression( line, target, 
                  ambiguousPart( id ), id.simpleName(), args ); 
            } 
        ] |
        <LBRACK> { line = token.beginLine; }
        { expr = new JArrayExpression( line, target, expression() ); } 
        <RBRACK> 
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return expr; }
}

/**
 * Parse a primary expression.
 * 
 * <pre>
 *   primary ::= parExpression
 *             | THIS [arguments]
 *             | SUPER ( arguments 
 *                     | DOT IDENTIFIER [arguments] 
 *                     )
 *             | literal
 *             | NEW creator
 *             | qualifiedIdentifier [arguments]
 * </pre>
 * 
 * @return an AST for a primary.
 */

private JExpression primary(): {
    int line = 0;
    JExpression expr = null;
    JExpression newTarget = null;
    ArrayList<JExpression> args = null;
    TypeName id = null;
}
{
    try {
        expr = parExpression() |
        <THIS> { line = token.beginLine; expr = new JThis( line ); }
        [ 
            args = arguments() 
            { expr = new JThisConstruction( line, args ); } 
        ] |
        <SUPER> { line = token.beginLine; }
        ( 
            args = arguments() 
            { expr = new JSuperConstruction( line, args ); } | 
            <DOT> <IDENTIFIER> 
            { 
                newTarget = new JSuper( line );
                expr = new JFieldSelection( line, newTarget, 
                                            token.image );
            }
            [ 
                args = arguments() 
                { expr = new JMessageExpression( line, newTarget, 
                      null, token.image, args ); }
            ] 
        ) |
        expr = literal() |
        <NEW> expr = creator() |

        // Language is ambiguous here. JavaCC warns about not being 
        // able to choose between qualifiedIdentifier and selector. 
        // Semantic analysis will sort it out.
        id = qualifiedIdentifier() 
        { 
            line = id.line(); 
            if ( ambiguousPart( id ) == null ) {
                expr = new JVariable( line, id.simpleName() );
            }
            else {
                expr = new JFieldSelection( line, ambiguousPart( id ), 
                                            null, id.simpleName() );             
            }
        } 
        [
            args = arguments()
            { expr = new JMessageExpression( line, null, 
                  ambiguousPart( id ), id.simpleName(), args ); }
        ]
    } 
    catch ( ParseException e ) { 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return expr; }
}

/**
 * Parse a creator.
 * 
 * <pre>
 *   creator ::= (basicType | qualifiedIdentifier) 
 *                 ( arguments
 *                 | LBRACK RBRACK {LBRACK RBRACK} 
 *                     [arrayInitializer]
 *                 | newArrayDeclarator
 *                 )
 * </pre>
 * 
 * @return an AST for a creator.
 */

private JExpression creator(): {
    int line = 0;
    Type type = null;
    ArrayList<JExpression> args = null;
    ArrayList<JExpression> dims = null;
    JArrayInitializer init =  null;
    JExpression expr = null;
    Type expected = null;
}
{
    try {
        ( type = basicType() |
          type = qualifiedIdentifier() )
        { line = token.beginLine; expected = type; }
        (
            args = arguments()
            { expr = new JNewOp( line, type, args ); } |
            LOOKAHEAD( <LBRACK> expression() <RBRACK> )
            expr = newArrayDeclarator( type ) |
            <LBRACK> <RBRACK> { expected = new ArrayTypeName( expected
    ); }
            (
                LOOKAHEAD( <LBRACK> <RBRACK> )
                <LBRACK> <RBRACK>
                { expected = new ArrayTypeName( expected ); }
            )*
            [
               expr = arrayInitializer( expected )
            ]
        )
    }
    catch ( ParseException e ) {
        expr = new JWildExpression( token.beginLine );
        recoverFromError( new int[] { SEMI, EOF }, e );
    }
    { return expr; }
}

/**
 * Parse a new array declarator.
 * 
 * <pre>
 *   newArrayDeclarator ::= LBRACK expression RBRACK 
 *                            {LBRACK expression RBRACK}
 *                            {LBRACK RBRACK}
 * </pre>
 * 
 * @param line line in which the declarator occurred.
 * @param type type of the array.
 * @return an AST for a newArrayDeclarator.
 */

private JNewArrayOp newArrayDeclarator( Type type ): {
    int line = 0;
    ArrayList<JExpression> dimensions = new ArrayList<JExpression>();
    JExpression expr = null;
}
{
    try {
        <LBRACK> { line = token.beginLine; } 
        expr = expression() 
        { dimensions.add( expr ); type = new ArrayTypeName( type ); }
        <RBRACK>
        ( 
            LOOKAHEAD( <LBRACK> expression() <RBRACK> )
            <LBRACK> 
            expr = expression() 
            { dimensions.add( expr); type = new ArrayTypeName( type ); } 
            <RBRACK> 
        )*
        (
            LOOKAHEAD( <LBRACK> <RBRACK> )
            <LBRACK> <RBRACK> { type = new ArrayTypeName( type ); }
        )*
    } 
    catch ( ParseException e ) {
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return new JNewArrayOp( line, type, dimensions ); }
}

/**
 * Parse a literal.
 * 
 * <pre>
 *   literal ::= INT_LITERAL | DOUBLE_LITERAL | CHAR_LITERAL | STRING_LITERAL
 *             | TRUE        | FALSE          | NULL
 * </pre>
 * 
 * @return an AST for a literal.
 */

private JExpression literal(): {
    JExpression expr = null;
}
{       
    try {
        <DOUBLE_LITERAL> 
        { expr = new JLiteralDouble( token.beginLine, token.image ); } | 
        <INT_LITERAL> 
        { expr = new JLiteralInt( token.beginLine, token.image ); } | 
        <CHAR_LITERAL> 
        { expr = new JLiteralChar( token.beginLine, token.image ); } |
        <STRING_LITERAL> 
        { expr = 
              new JLiteralString( token.beginLine, token.image ); } | 
        <TRUE> 
        { expr = new JLiteralTrue( token.beginLine ); } | 
        <FALSE> 
        { expr = new JLiteralFalse( token.beginLine ); } |
        <NULL> 
        { expr = new JLiteralNull( token.beginLine ); }
    } 
    catch ( ParseException e ) { 
        expr = new JWildExpression( token.beginLine ); 
        recoverFromError( new int[] { SEMI, EOF }, e ); 
    }
    { return expr; }
}
